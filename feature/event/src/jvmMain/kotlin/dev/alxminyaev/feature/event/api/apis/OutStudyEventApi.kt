/**
* Event service
* Event service
*
* The version of the OpenAPI document: 1.0.0
* Contact: alxminyaev@gmail.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dev.alxminyaev.feature.event.api.apis


import com.google.gson.Gson
import dev.alxminyaev.feature.event.api.Paths
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.response.*
import io.ktor.routing.*

@KtorExperimentalLocationsAPI
fun Route.OutStudyEventApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    delete<Paths.deleteConfirmationByOutStudyEventId> {  _: Paths.deleteConfirmationByOutStudyEventId ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    delete<Paths.deleteEventByOutStudyEventId> {  _: Paths.deleteEventByOutStudyEventId ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    delete<Paths.deleteRegistrationByOutStudyEventId> {  _: Paths.deleteRegistrationByOutStudyEventId ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    get<Paths.getByOutStudyEventId> {  _: Paths.getByOutStudyEventId ->
        val exampleContentType = "application/json"
val exampleContentString = """{
          "members" : [ {
            "isConfirmed" : true,
            "user" : {
              "roles" : [ 7, 7 ],
              "profile" : {
                "firstName" : "firstName",
                "lastName" : "lastName",
                "middleName" : "middleName"
              },
              "id" : 2
            }
          }, {
            "isConfirmed" : true,
            "user" : {
              "roles" : [ 7, 7 ],
              "profile" : {
                "firstName" : "firstName",
                "lastName" : "lastName",
                "middleName" : "middleName"
              },
              "id" : 2
            }
          } ],
          "event" : {
            "dateRegistrationEnd" : "2000-01-23T04:56:07.000+00:00",
            "isNeedMemberConfirmation" : true,
            "address" : "address",
            "description" : "description",
            "dateEnd" : "2000-01-23T04:56:07.000+00:00",
            "maxMembers" : 1,
            "dateStart" : "2000-01-23T04:56:07.000+00:00",
            "organizer" : {
              "user" : {
                "roles" : [ 7, 7 ],
                "profile" : {
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "middleName" : "middleName"
                },
                "id" : 2
              }
            },
            "name" : "name",
            "minMembers" : 5,
            "isConfirmed" : true,
            "id" : 0,
            "outstudyEventKind" : 6,
            "status" : 5
          }
        }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

    }


    get<Paths.getOutStudyEvents> {  _: Paths.getOutStudyEvents ->
        val exampleContentType = "application/json"
val exampleContentString = """{
          "data" : [ {
            "dateRegistrationEnd" : "2000-01-23T04:56:07.000+00:00",
            "isNeedMemberConfirmation" : true,
            "address" : "address",
            "description" : "description",
            "dateEnd" : "2000-01-23T04:56:07.000+00:00",
            "maxMembers" : 1,
            "dateStart" : "2000-01-23T04:56:07.000+00:00",
            "organizer" : {
              "user" : {
                "roles" : [ 7, 7 ],
                "profile" : {
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "middleName" : "middleName"
                },
                "id" : 2
              }
            },
            "name" : "name",
            "minMembers" : 5,
            "isConfirmed" : true,
            "id" : 0,
            "outstudyEventKind" : 6,
            "status" : 5
          }, {
            "dateRegistrationEnd" : "2000-01-23T04:56:07.000+00:00",
            "isNeedMemberConfirmation" : true,
            "address" : "address",
            "description" : "description",
            "dateEnd" : "2000-01-23T04:56:07.000+00:00",
            "maxMembers" : 1,
            "dateStart" : "2000-01-23T04:56:07.000+00:00",
            "organizer" : {
              "user" : {
                "roles" : [ 7, 7 ],
                "profile" : {
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "middleName" : "middleName"
                },
                "id" : 2
              }
            },
            "name" : "name",
            "minMembers" : 5,
            "isConfirmed" : true,
            "id" : 0,
            "outstudyEventKind" : 6,
            "status" : 5
          } ]
        }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

    }


    route("/api/v1/outstudy-event/{id}/user-confirm") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }


    route("/api/v1/outstudy-event") {
        post {
            val exampleContentType = "application/json"
val exampleContentString = """{
              "id" : 0
            }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

        }
    }


    route("/api/v1/outstudy-event/{id}/registration") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }


    route("/api/v1/outstudy-event/{id}") {
        put {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }

}
