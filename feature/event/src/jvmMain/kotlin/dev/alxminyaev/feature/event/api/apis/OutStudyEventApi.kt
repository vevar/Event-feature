/**
 * Event service
 * Event service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: alxminyaev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.alxminyaev.feature.event.api.apis


import com.alxminyaev.tool.domain.model.EntityRef
import com.alxminyaev.tool.error.exceptions.UnauthorizedException
import com.google.gson.Gson
import dev.alxminyaev.feature.event.DataLimit
import dev.alxminyaev.feature.event.api.Paths
import dev.alxminyaev.feature.event.api.models.EntityLongCreatedResponse
import dev.alxminyaev.feature.event.api.models.OutStudyEventListResponse
import dev.alxminyaev.feature.event.api.models.OutStudyEventPostRequest
import dev.alxminyaev.feature.event.model.toApi
import dev.alxminyaev.feature.event.model.toDomain
import dev.alxminyaev.feature.event.usecase.outstudy.CreateNewOutStudyEventUseCase
import dev.alxminyaev.feature.event.usecase.outstudy.GetListOutStudyEventUseCase
import dev.alxminyaev.tool.webServer.utils.User
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import org.kodein.di.instance
import org.kodein.di.ktor.di

@KtorExperimentalLocationsAPI
fun Route.OutStudyEventApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    delete<Paths.deleteConfirmationByOutStudyEventId> { _: Paths.deleteConfirmationByOutStudyEventId ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    delete<Paths.deleteEventByOutStudyEventId> { _: Paths.deleteEventByOutStudyEventId ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    delete<Paths.deleteRegistrationByOutStudyEventId> { _: Paths.deleteRegistrationByOutStudyEventId ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    get<Paths.getByOutStudyEventId> { _: Paths.getByOutStudyEventId ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "members" : [ {
            "isConfirmed" : true,
            "user" : {
              "roles" : [ 7, 7 ],
              "profile" : {
                "firstName" : "firstName",
                "lastName" : "lastName",
                "middleName" : "middleName"
              },
              "id" : 2
            }
          }, {
            "isConfirmed" : true,
            "user" : {
              "roles" : [ 7, 7 ],
              "profile" : {
                "firstName" : "firstName",
                "lastName" : "lastName",
                "middleName" : "middleName"
              },
              "id" : 2
            }
          } ],
          "event" : {
            "dateRegistrationEnd" : "2000-01-23T04:56:07.000+00:00",
            "isNeedMemberConfirmation" : true,
            "address" : "address",
            "description" : "description",
            "dateEnd" : "2000-01-23T04:56:07.000+00:00",
            "maxMembers" : 1,
            "dateStart" : "2000-01-23T04:56:07.000+00:00",
            "organizer" : {
              "user" : {
                "roles" : [ 7, 7 ],
                "profile" : {
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "middleName" : "middleName"
                },
                "id" : 2
              }
            },
            "name" : "name",
            "minMembers" : 5,
            "isConfirmed" : true,
            "id" : 0,
            "outstudyEventKind" : 6,
            "status" : 5
          }
        }"""

        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }

    }


    get<Paths.getOutStudyEvents> { param: Paths.getOutStudyEvents ->
        val useCase by di().instance<GetListOutStudyEventUseCase>()
        val userList = useCase.invoke(DataLimit(offset = param.offset, size = param.limit))
        call.respond(OutStudyEventListResponse(size = 9999, data = userList.map { it.toApi() }.toTypedArray()))
    }


    route("/api/v1/outstudy-event/{id}/user-confirm") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }


    route("/api/v1/outstudy-event") {
        post {
            val obj = call.receive<OutStudyEventPostRequest>()
//            val user = call.principal<User>() ?: throw UnauthorizedException() TODO replace hardcode
            val useCase by di().instance<CreateNewOutStudyEventUseCase>()
            val eventId = useCase.invoke(obj.toDomain(organizer = EntityRef(2)))
            call.respond(EntityLongCreatedResponse(eventId))
        }
    }


    route("/api/v1/outstudy-event/{id}/registration") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }


    route("/api/v1/outstudy-event/{id}") {
        put {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }

}
